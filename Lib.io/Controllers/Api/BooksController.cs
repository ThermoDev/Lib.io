using System;
using System.Collections.Generic;
using System.Data.Entity;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Web.Http;
using Lib.io.Models;
using Lib.io.Dtos;
using AutoMapper;


namespace Lib.io.Controllers.Api {
    public class BooksController : ApiController {
        private ApplicationDbContext _context;

        public BooksController() {
            _context = new ApplicationDbContext();
        }

        // GET: /api/books
        [HttpGet]
        public IEnumerable<BookDto> GetBooks() {
            // Maps the Book to the BookDto, and returns the reference to this method.
            // Also includes the Genre using the Data Entity
            return _context.Books
                .Include(b => b.Genre)
                .ToList()
                .Select(Mapper.Map<Book, BookDto>);
        }

        // GET: /api/books/<id>
        [HttpGet]
        public IHttpActionResult GetMembes(int id) {
            var book = _context.Books.SingleOrDefault(m => m.Id == id);

            if (book == null)
                return NotFound();
            else
                return Ok(Mapper.Map<Book, BookDto>(book));
        }

        // POST: /api/books
        [HttpPost]
        [Authorize(Roles = RoleName.CanManageBooks)]
        public IHttpActionResult CreateBook(BookDto bookDto) {
            if (!ModelState.IsValid)
                return BadRequest();

            var book = Mapper.Map<BookDto, Book>(bookDto);
            _context.Books.Add(book);
            _context.SaveChanges();
            // Id is generated by the database, add it to DTO and return it to client.
            bookDto.Id = book.Id;

            // Returns the URI (Unified Resource Identifier)
            return Created(new Uri(Request.RequestUri + "/" + book.Id), bookDto);
        }

        // PUT: /api/books/<id>
        [HttpPut]
        [Authorize(Roles = RoleName.CanManageBooks)]
        public void UpdateBook(int id, BookDto bookDto) {
            if (!ModelState.IsValid)
                throw new HttpResponseException(HttpStatusCode.BadRequest);

            var bookInDb = _context.Books.Single(m => m.Id == id);
            if (bookInDb == null)
                throw new HttpResponseException(HttpStatusCode.NotFound);

            // Use second argument for the existing book in database.
            Mapper.Map<BookDto, Book>(bookDto, bookInDb);

            _context.SaveChanges();
        }

        // DELETE: /apis/books/<id>
        [HttpDelete]
        [Authorize(Roles = RoleName.CanManageBooks)]
        public void DeleteBook(int id) {
            if (!ModelState.IsValid)
                throw new HttpResponseException(HttpStatusCode.BadRequest);

            var bookInDb = _context.Books.Single(m => m.Id == id);
            if (bookInDb == null)
                throw new HttpResponseException(HttpStatusCode.NotFound);

            _context.Books.Remove(bookInDb);
            _context.SaveChanges();
        }
    }
}

